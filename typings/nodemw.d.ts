/** Declaration file generated by dts-gen */

export = nodemw;

interface api {
    API_PREFIX: string;

    call(param: any, callback: (err: any, info: any, next: any, data: any) => void, method?: any): void;

    getUser(...args: any[]): void;

    getUsers(...args: any[]): void;

    getWikiVariables(...args: any[]): void;

}

interface options {
    protocol?: string;
    port?: number;
    server: string;
    path?: string;
    proxy?: string;
    username?: string;
    password?: string;
    domain?: string;
    userAgent?: string;
    concurrency?: number;
    debug?: boolean; 
}

declare class nodemw {
    constructor(params: options);

    public protocol: string;
    public server: string;
    public options: options;

    addFlowTopic(...args: any[]): void;

    append(...args: any[]): void;

    createAccount(...args: any[]): void;

    delete(...args: any[]): void;

    diff(...args: any[]): void;

    doEdit(...args: any[]): void;

    edit(...args: any[]): void;

    error(...args: any[]): void;

    expandTemplates(...args: any[]): void;

    fetchUrl(...args: any[]): void;

    getAll(...args: any[]): void;

    getAllPages(...args: any[]): void;

    getArticle(...args: any[]): void;

    getArticleCategories(...args: any[]): void;

    getArticleRevisions(...args: any[]): void;

    getBacklinks(...args: any[]): void;

    getCategories(...args: any[]): void;

    getConfig(...args: any[]): void;

    getExternalLinks(...args: any[]): void;

    getImageInfo(...args: any[]): void;

    getImageUsage(...args: any[]): void;

    getImages(...args: any[]): void;

    getImagesFromArticle(...args: any[]): void;

    getLog(...args: any[]): void;

    getMediaWikiVersion(...args: any[]): void;

    getPagesByPrefix(...args: any[]): void;

    getPagesInCategory(...args: any[]): void;

    getPagesInNamespace(...args: any[]): void;

    getPagesTranscluding(...args: any[]): void;

    getQueryPage(...args: any[]): void;

    getRand(...args: any[]): void;

    getRecentChanges(...args: any[]): void;

    getSiteInfo(...args: any[]): void;

    getSiteStats(...args: any[]): void;

    getTemplateParamFromXml(...args: any[]): void;

    getToken(...args: any[]): void;

    getUserContribs(...args: any[]): void;

    getUsers(...args: any[]): void;

    log(...args: any[]): void;

    logData(...args: any[]): void;

    logIn(...args: any[]): void;

    move(...args: any[]): void;

    parse(...args: any[]): void;

    prepend(...args: any[]): void;

    purge(...args: any[]): void;

    search(...args: any[]): void;

    sendEmail(...args: any[]): void;

    setConfig(...args: any[]): void;

    upload(...args: any[]): void;

    uploadByUrl(...args: any[]): void;

    uploadVideo(...args: any[]): void;

    whoami(...args: any[]): void;

    whoare(...args: any[]): void;

    whois(...args: any[]): void;

    api: api;
}

declare namespace nodemw {
    // @ts-ignore
    namespace prototype {
        function addFlowTopic(...args: any[]): void;

        function append(...args: any[]): void;

        function createAccount(...args: any[]): void;

        function diff(...args: any[]): void;

        function doEdit(...args: any[]): void;

        function edit(...args: any[]): void;

        function error(...args: any[]): void;

        function expandTemplates(...args: any[]): void;

        function fetchUrl(...args: any[]): void;

        function getAll(...args: any[]): void;

        function getAllPages(...args: any[]): void;

        function getArticle(...args: any[]): void;

        function getArticleCategories(...args: any[]): void;

        function getArticleRevisions(...args: any[]): void;

        function getBacklinks(...args: any[]): void;

        function getCategories(...args: any[]): void;

        function getConfig(...args: any[]): void;

        function getExternalLinks(...args: any[]): void;

        function getImageInfo(...args: any[]): void;

        function getImageUsage(...args: any[]): void;

        function getImages(...args: any[]): void;

        function getImagesFromArticle(...args: any[]): void;

        function getLog(...args: any[]): void;

        function getMediaWikiVersion(...args: any[]): void;

        function getPagesByPrefix(...args: any[]): void;

        function getPagesInCategory(...args: any[]): void;

        function getPagesInNamespace(...args: any[]): void;

        function getPagesTranscluding(...args: any[]): void;

        function getQueryPage(...args: any[]): void;

        function getRand(...args: any[]): void;

        function getRecentChanges(...args: any[]): void;

        function getSiteInfo(...args: any[]): void;

        function getSiteStats(...args: any[]): void;

        function getTemplateParamFromXml(...args: any[]): void;

        function getToken(...args: any[]): void;

        function getUserContribs(...args: any[]): void;

        function getUsers(...args: any[]): void;

        function log(...args: any[]): void;

        function logData(...args: any[]): void;

        function logIn(...args: any[]): void;

        function move(...args: any[]): void;

        function parse(...args: any[]): void;

        function prepend(...args: any[]): void;

        function purge(...args: any[]): void;

        function search(...args: any[]): void;

        function sendEmail(...args: any[]): void;

        function setConfig(...args: any[]): void;

        function upload(...args: any[]): void;

        function uploadByUrl(...args: any[]): void;

        function uploadVideo(...args: any[]): void;

        function whoami(...args: any[]): void;

        function whoare(...args: any[]): void;

        function whois(...args: any[]): void;

        namespace api {
            const API_PREFIX: string;
        
            function call(param: any, callback: (err: any, info: any, next: any, data: any) => void, method?: any): void;
        
            function getUser(...args: any[]): void;
        
            function getUsers(...args: any[]): void;
        
            function getWikiVariables(...args: any[]): void;
        
        }

    }

}

